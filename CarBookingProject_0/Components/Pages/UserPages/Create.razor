@page "/users/create"
@using Microsoft.EntityFrameworkCore
@using CarBookingProject_0.Domain
@inject IDbContextFactory<CarBookingProject_0.Data.CarBookingProject_0Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>User</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="User" OnValidSubmit="AddUser" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label> 
                <InputText id="name" @bind-Value="User.Name" class="form-control" /> 
                <ValidationMessage For="() => User.Name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="email" class="form-label">Email:</label> 
                <InputText id="email" @bind-Value="User.Email" class="form-control" /> 
                <ValidationMessage For="() => User.Email" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="phonenumber" class="form-label">PhoneNumber:</label> 
                <InputText id="phonenumber" @bind-Value="User.PhoneNumber" class="form-control" /> 
                <ValidationMessage For="() => User.PhoneNumber" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="dateofbirth" class="form-label">DateOfBirth:</label> 
                <InputText id="dateofbirth" @bind-Value="User.DateOfBirth" class="form-control" /> 
                <ValidationMessage For="() => User.DateOfBirth" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="gender" class="form-label">Gender:</label> 
                <InputText id="gender" @bind-Value="User.Gender" class="form-control" /> 
                <ValidationMessage For="() => User.Gender" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="address" class="form-label">Address:</label> 
                <InputText id="address" @bind-Value="User.Address" class="form-control" /> 
                <ValidationMessage For="() => User.Address" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="carlicense" class="form-label">CarLicense:</label> 
                <InputText id="carlicense" @bind-Value="User.CarLicense" class="form-control" /> 
                <ValidationMessage For="() => User.CarLicense" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="acceptancerate" class="form-label">AcceptanceRate:</label> 
                <InputText id="acceptancerate" @bind-Value="User.AcceptanceRate" class="form-control" /> 
                <ValidationMessage For="() => User.AcceptanceRate" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="drivingexperience" class="form-label">DrivingExperience:</label> 
                <InputText id="drivingexperience" @bind-Value="User.DrivingExperience" class="form-control" /> 
                <ValidationMessage For="() => User.DrivingExperience" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="frequentlocations" class="form-label">FrequentLocations:</label> 
                <InputText id="frequentlocations" @bind-Value="User.FrequentLocations" class="form-control" /> 
                <ValidationMessage For="() => User.FrequentLocations" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="preferredpickuptime" class="form-label">PreferredPickupTime:</label> 
                <InputText id="preferredpickuptime" @bind-Value="User.PreferredPickupTime" class="form-control" /> 
                <ValidationMessage For="() => User.PreferredPickupTime" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="roleid" class="form-label">RoleId:</label> 
                <InputNumber id="roleid" @bind-Value="User.RoleId" class="form-control" /> 
                <ValidationMessage For="() => User.RoleId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="datecreated" class="form-label">DateCreated:</label> 
                <InputDate id="datecreated" @bind-Value="User.DateCreated" class="form-control" /> 
                <ValidationMessage For="() => User.DateCreated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="dateupdated" class="form-label">DateUpdated:</label> 
                <InputDate id="dateupdated" @bind-Value="User.DateUpdated" class="form-control" /> 
                <ValidationMessage For="() => User.DateUpdated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="createdby" class="form-label">CreatedBy:</label> 
                <InputText id="createdby" @bind-Value="User.CreatedBy" class="form-control" /> 
                <ValidationMessage For="() => User.CreatedBy" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="updatedby" class="form-label">UpdatedBy:</label> 
                <InputText id="updatedby" @bind-Value="User.UpdatedBy" class="form-control" /> 
                <ValidationMessage For="() => User.UpdatedBy" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/users">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private User User { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddUser()
    {
        using var context = DbFactory.CreateDbContext();
        context.User.Add(User);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/users");
    }
}
