@page "/feedbacks/delete"
@using Microsoft.EntityFrameworkCore
@using CarBookingProject_0.Domain
@inject IDbContextFactory<CarBookingProject_0.Data.CarBookingProject_0Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Feedback</h2>
    <hr />
    @if (feedback is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Rating</dt>
            <dd class="col-sm-10">@feedback.Rating</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Comments</dt>
            <dd class="col-sm-10">@feedback.Comments</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">FeedbackDateTime</dt>
            <dd class="col-sm-10">@feedback.FeedbackDateTime</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">RideId</dt>
            <dd class="col-sm-10">@feedback.RideId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UserId</dt>
            <dd class="col-sm-10">@feedback.UserId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@feedback.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@feedback.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@feedback.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@feedback.UpdatedBy</dd>
        </dl>
        <EditForm method="post" Model="feedback" OnValidSubmit="DeleteFeedback" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(feedback is null)">Delete</button> |
            <a href="/feedbacks">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Feedback? feedback;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        feedback = await context.Feedback.FirstOrDefaultAsync(m => m.Id == Id);

        if (feedback is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteFeedback()
    {
        using var context = DbFactory.CreateDbContext();
        context.Feedback.Remove(feedback!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/feedbacks");
    }
}
